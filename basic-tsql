-- QUERY 1: HOW TO CREATE NEW DATABASE?   
CREATE   DATABASE 	EmployeeDatabase	  -- 1 data file : to store actual data			[MDF : Primary data file]
										                     -- 1 log file  : to store audit information	[LDF: Log data file]	

-- QUERY 2: HOW TO CONNECT TO ABOVE DATABASE? 
USE  EmployeeDatabase				

-- QUERY 3: HOW TO CREATE NEW TABLE IN ABOVE DATABASE?	
CREATE TABLE EMPLOYEE_INFO2			
 (
	EmployeeID          INT,			-- this column stores DIGITS : 0, -10, 99, etc..
    EmployeeName		CHAR (30),		-- this column stores up to 30 CHARACTERS. TO STORE FIXED DATA.
	EmployeeCountry		VARCHAR(40),	-- this column stores up to 40 CHARACTERS. TO STORE VARYING DATA.
	EmployeeSalary      INT				-- this column stores DIGITS : 0, -10, 99, etc..
)

-- CHAR	:	TO STORE FIXED DATA.   EXAMPLE:  USER NAME
-- VARCHAR: TO STORE VARYING, TIME ORIENTED DATA. EXAMPLE: PASSWORD


-- QUERY 5: BATCH : A COLLECTION OF SQL STATEMENTS. PURPOSE : PIPELINE EXECUTIONS OF HUGE SQL STATEMENTS
INSERT 	INTO  EMPLOYEE_INFO VALUES (1001, 'AMIN', 'CANADA', 45678)	
INSERT   EMPLOYEE_INFO VALUES (1002, 'JOHN',  'CANADA', 60000), (1003, 'JEFF',  'USA', 36363)
GO
INSERT   INTO  EMPLOYEE_INFO VALUES (1004, 'JACK',  'CANADA', 60000);
INSERT   INTO  EMPLOYEE_INFO VALUES (1005, 'JEFF',  'USA', NULL),  (1006, 'JENY',  'USA', NULL)

-- NULL  : AN UNDEFINED VALUE. MEANS UNKNOWN VALUE.

-- QUERY 6: HOW TO REPORT ABOVE INSERTED DATA IN THE TABLE ?
SELECT * FROM EMPLOYEE_INFO					-- * MEANS ALL COLUMNS

-- QUERY 7: HOW TO REPORT ALL EMPLOYEES FROM CANADA ?
SELECT  *  FROM EMPLOYEE_INFO WHERE EmployeeCountry= 'CANADA'  

-- QUERY 8: HOW TO REPORT ALL EMPLOYEES FROM USA OR CANADA ?
SELECT * FROM EMPLOYEE_INFO WHERE EmployeeCountry = 'USA' OR EmployeeCountry = 'CANADA'

SELECT  *  FROM EMPLOYEE_INFO WHERE EmployeeCountry IN ('USA','CANADA')   


-- QUERY 9: HOW TO REPORT ALL EMPLOYEES WITH SALARY BETWEEN 30000 AND 40000?
SELECT  *  FROM EMPLOYEE_INFO WHERE EMPLOYEESALARY BETWEEN 30000 AND 40000


-- QUERY 10: HOW TO REPORT ALL EMPLOYEES WITH SALARY NOT BETWEEN 30000 AND 40000?
SELECT  *  FROM EMPLOYEE_INFO WHERE EmployeeSalary NOT BETWEEN 30000 AND 40000


-- QUERY 11: HOW TO REPORT ALL EMPLOYEES WHOSE FIRST NAME IS 'AMIN'?
 SELECT  *  FROM EMPLOYEE_INFO WHERE EmployeeName  = 'AMIN'

 -- TO COMPARE RANGE OF CHARACTERS, WE NEED TO USE EITHER % OR _
		-- %  :  TO COMPARE OR SEARCH FOR ANY NUMBER OF CHARACTERS.
		-- _  :  TO COMPARE OR SEARCH FOR A SINGLE CHARACTER.

-- QUERY 12: HOW TO REPORT ALL EMPLOYEES WHOSE NAME STARTS WITH LETTER 'J'?
 SELECT  *  FROM EMPLOYEE_INFO WHERE EmployeeName  LIKE 'J%'   

-- QUERY 13: HOW TO REPORT ALL EMPLOYEES WHOSE NAME NOT START WITH LETTER 'J'?
 SELECT  *  FROM EMPLOYEE_INFO WHERE EmployeeName NOT LIKE 'J%'   
 
-- QUERY 14: (T) HOW TO REPORT ALL EMPLOYEES WHOSE NAME CONTAINS EXACTLY 4 CHARACTERS ?
 SELECT  *  FROM EMPLOYEE_INFO WHERE EmployeeName LIKE '____'  

 -- QUERY 14.5: HOW TO REPORT ALL EMPLOYEES WHOSE NAME STARTS WITH J AND CONTAINS EXACTLY 4 CHARACTERS ?
  SELECT  *  FROM EMPLOYEE_INFO WHERE EmployeeName LIKE 'J___'  

-- QUERY 15: HOW TO REPORT ALL EMPLOYEES WITH ASCENDING ORDER OF SALARIES? 
SELECT  *  FROM EMPLOYEE_INFO ORDER BY EmployeeSalary  ASC		-- SORTED ORDER: LOW TO HIGH

-- QUERY 16: HOW TO REPORT ALL EMPLOYEES WITH DESCENDING ORDER OF SALARIES? 
SELECT  *  FROM EMPLOYEE_INFO ORDER BY EmployeeSalary   DESC	-- SORTED ORDER: HIGH TO LOW

-- QUERY 17: HOW TO REPORT TOP 3 EMPLOYEES WITH HIGHEST SALARY ?
SELECT  TOP 3 *  FROM EMPLOYEE_INFO ORDER BY EmployeeSalary DESC

-- QUERY 18: HOW TO REPORT 4TH AND REMAINING EMPLOYEES  - BASED ON THEIR IDs? 
 SELECT TOP 3 * FROM EMPLOYEE_INFO ORDER BY EMPLOYEEID
 SELECT * FROM EMPLOYEE_INFO ORDER BY EMPLOYEEID ASC OFFSET 3 ROWS	
 SELECT * FROM EMPLOYEE_INFO ORDER BY EMPLOYEEID ASC OFFSET 2 ROWS	


-- QUERY 19: HOW TO REPORT UNIQUE (DISTINCT) EMPLOYEES ? 
SELECT * FROM EMPLOYEE_INFO 
SELECT EmployeeID, EmployeeName, EmployeeCountry, EmployeeSalary FROM EMPLOYEE_INFO
SELECT EmployeeSalary FROM EMPLOYEE_INFO 
SELECT DISTINCT EmployeeSalary FROM EMPLOYEE_INFO 
					-- DISTINCT MEANS TO REPORT UNIQUE VALUES. NO DUPLICATES.



/*
 IN				NOT IN
 BETWEEN		NOT BETWEEN
 LIKE			NOT LIKE
 TOP			OFFSET
 ASC			DESC
 ORDER BY
 DISTINCT
 */

 -- QUERY 20: HOW TO REPORT MAXIMUM SALARY OUT OF (FOR) ALL EMPLOYEES ? 

SELECT * FROM EMPLOYEE_INFO
SELECT EmployeeSalary FROM EMPLOYEE_INFO

SELECT MAX(EmployeeSalary) FROM EMPLOYEE_INFO		-- MAX( ) IS A PREDEFINED (BUILT-IN) FUNCTION

-- ANY MODIFICATION TO THE COLUMN VALUE WILL RESULT IN LOSS OF ACTUAL COLUMN NAME. WE USE ALIAS
-- ALIAS : A TEMPORARY NAME GIVEN TO A TABLE OR A COLUMN OR A QUERY FOR EASY REFERENCE.

SELECT MAX(EmployeeSalary) AS MAXIMUM_SALARY FROM EMPLOYEE_INFO	
    
-- QUERY 21: HOW TO REPORT ALL EMPLOYEES WITH ABOVE MAXIMUM SALARY?
SELECT * FROM EMPLOYEE_INFO
SELECT * FROM EMPLOYEE_INFO WHERE EMPLOYEESALARY = 60000
SELECT * FROM EMPLOYEE_INFO WHERE EMPLOYEESALARY = ( SELECT MAX(EmployeeSalary) AS MAXIMUM_SALARY FROM EMPLOYEE_INFO	)

-- SUB QUERY :  TO DEFINE ONE QUERY INSIDE ANOTHER QUERY. FOR DYNAMIC CONDITIONS.

-- QUERY 21: HOW TO REPORT ALL EMPLOYEES WITH ABOVE MINIMUM SALARY?
SELECT * FROM EMPLOYEE_INFO WHERE EmployeeSalary = (SELECT MIN(EmployeeSalary) FROM EMPLOYEE_INFO)

 /*
 IN			NOT IN
 BETWEEN	NOT BETWEEN
 LIKE		NOT LIKE
 %			_
 ASC		DESC
 TOP		OFFSET

 DISTINCT
 MAX( )		MIN()
 AS
 SUB QUERY
 TABLE SCAN
 LIVE QUERY STATISTICS			:	TO VERIFY TABLE SCAN. AN INTERNAL EXECUTION PLAN.
 CLIENT STATISTICS				:	TO VERIFY THE QUERY EXECUTION TIME. IN MILLI SECONDS. FOR QUERY COMPARISONS.
 */


/*
CLIENT STAISTICS:  USED TO MEASURE THE ACTUAL EXECUTION TIME IN MILLI SECONDS.

RIGHT CLICK QUERY > INCLUDE CLIENT STATISTICS.
RIGHT CLICK QUERY > EXECUTE		>> THEN WE SEE 3RD TAB IN THE OUTPUT THAT SHOWS THE EXECUTION DETAILS.
*/

-- QUERY 22:  HOW TO FIND THE LIST OF ALL EMPLOYEES WITH UNKNOWN SALARY VALUES ? 
SELECT * FROM EMPLOYEE_INFO WHERE EmployeeSalary IS NULL
SELECT * FROM EMPLOYEE_INFO

-- QUERY 23:  HOW TO REPLACE UNKNOWN SALARIES WITH A SPECIFIC VALUE. EXAMPLE : 10000 ? 
SELECT * FROM EMPLOYEE_INFO
UPDATE EMPLOYEE_INFO SET EmployeeSalary  = 10000 WHERE EmployeeSalary  IS NULL
SELECT * FROM EMPLOYEE_INFO

-- QUERY 24:   HOW TO REMOVE THE LIST OF ALL EMPLOYEES FROM TABLE ?  
DELETE FROM EMPLOYEE_INFO WHERE EmployeeSalary = 10000		-- TO REMOVE ABOVE TWO ROWS
SELECT * FROM EMPLOYEE_INFO			-- NOTICE THAT ONLY REMAINING ROWS ARE STORED IN TABLE

SELECT * FROM EMPLOYEE_INFO	
DELETE FROM EMPLOYEE_INFO			-- REMOVES ALL DATA FROM TABLE ROW BY ROW
SELECT * FROM EMPLOYEE_INFO			-- NOTICE THAT NO MORE ROWS REMAINING IN TABLE
		
-- QUERY 25:   HOW TO REMOVE THE LIST OF ALL EMPLOYEES FROM TABLE. ALTERNATIVE TO DELETE.
TRUNCATE TABLE EMPLOYEE_INFO		-- REMOVES ALL ROWS FROM THE TABLE AT ONCE. NO CONDITIONS. 


use EmployeeDatabase3

-- QUERY 26:   	HOW TO ADD NEW COLUMN TO EXISTING TABLE?
ALTER TABLE EMPLOYEE_INFO ADD   [EMP  LOCATION]   VARCHAR(30)
SELECT * FROM EMPLOYEE_INFO

-- QUERY 27:	HOW TO MODIFY THE STRUCTURE OF EXISING COLUMN IN THE EXISTING TABLE?
ALTER TABLE EMPLOYEE_INFO ALTER COLUMN   [EMP  LOCATION]   VARCHAR(3000)   -- MAXIMUM : 8000

-- QUERY 28:	HOW TO REMOVE AN EXISING COLUMN FROM THE EXISTING TABLE?
ALTER TABLE EMPLOYEE_INFO DROP COLUMN   [EMP  LOCATION] 

-- QUERY 29:	HOW TO REMOVE THE TABLE FROM DATABASE?
DROP TABLE EMPLOYEE_INFO

-- QUERY 30:	HOW TO REMOVE THE DATABASE FROM THE SERVER (INSTANCE)?
USE MASTER 
GO
DROP DATABASE EmployeeDatabase


CLIENT STATISTICS :	
USED TO FIND  THE EXACT EXECUTION TIME OF A QUERY.
RIGHT CLICK QUERY > INCLUDE CLIENT STATISTICS.  AGAIN RIGHT CLICK QUERY > EXECUTE. THEN WE SEE ONE ADDITIONAL TAB “CLIENT STATISTICS”. 
