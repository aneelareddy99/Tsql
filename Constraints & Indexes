-- QUERY 1: 
CREATE DATABASE UNIVERSITYDATABASE11

-- QUERY 2:
USE UNIVERSITYDATABASE11

-- QUERY 3:
CREATE TABLE TBLCOURSES
(
COURSE_ID INT UNIQUE,				-- THIS COLUMN DOES NOT ALLOW DUPLICATES BUT ALLOW UPTO 1 NULL VALUE		
COURSE_NAME VARCHAR(30) NOT NULL,	-- THIS COLUMN DOES NOT ALLOW NULL VALUES
COURSE_DUR INT CHECK (COURSE_DUR = 120  OR COURSE_DUR = 180) -- VALUE SHOULD BE EITHER 120 OR 180 
)

-- QUERY 4: 
INSERT INTO TBLCOURSES VALUES (101, 'COMPUTERS', 120),  (102, 'ROBOTICS', 180)

-- QUERY 5: 
SELECT * FROM TBLCOURSES

-- TESTING UNIQUE KEY:
INSERT INTO TBLCOURSES VALUES (101, 'CIVIL', 120)	-- ERROR. REASON: DUPLICATE COURSE_ID VALUE

-- TESTING NULL CONSTRAINT:
INSERT INTO TBLCOURSES VALUES (101, NULL , 120)		-- ERROR. REASON: INVALID COURSE NAME

-- TESTING CHECK CONSTRAINT:
INSERT INTO TBLCOURSES VALUES (103, 'CIVIL', 100)	-- ERROR. REASON: INVALID COURSE DURATION

SELECT * FROM TBLCOURSES

-- QUERY 6:  REQUIREMENT :  EVERY STUDENT SHOULD BE REGISTERING TO ONE OF THE AVAILABLE (VALID) COURSES ONLY.
CREATE TABLE TBLSTUDENTS
(
STD_ID INT PRIMARY KEY,			-- THIS COLUMN DOES NOT ALLOW DUPLICATES & DOES NOT ALLLOW NULL VALUES
STD_NAME VARCHAR(30) NOT NULL,	-- THIS COLUMN DOES NOT ALLOW NULL VALUES	
STD_AGE TINYINT CHECK (STD_AGE >= 18),	-- THIS COLUMN VALUE SHOULD BE 18 OR ABOVE 
STD_COURSE_ID INT REFERENCES tblcourses(course_id)	-- REFERENCES (FOREIGN KEY). SHOULD BE VALID COURSE ID FROM COURSES TABLE
)

-- QUERY 7: 
INSERT  INTO  TBLSTUDENTS VALUES (1001, 'SAI', 34, 101)
INSERT  INTO  TBLSTUDENTS VALUES (1002, 'JON', 34, 101)   
INSERT  INTO  TBLSTUDENTS VALUES (1003, 'JOHNE', 34, 102)
INSERT  INTO  TBLSTUDENTS VALUES (1003, NULL, 34, 102)			-- ERROR
INSERT  INTO  TBLSTUDENTS VALUES (1003, 'JOHNE', 34, 102)		-- ERROR
INSERT  INTO  TBLSTUDENTS VALUES (1004, 'AMIN1', 34, 102)   
INSERT  INTO  TBLSTUDENTS VALUES (1005, 'AMIN', 34, 9999)    -- error. reason: invalid course id
INSERT  INTO  TBLSTUDENTS VALUES (1005, 'AMIN2', 34, 102)

-- QUERY 8: 
SELECT * FROM TBLSTUDENTS

-- TESTING FOREIGN KEY:
INSERT  INTO  TBLSTUDENTS VALUES (1005, 'JACK', 34, 106)		-- ERROR. REASON: INVALID COURSE ID
INSERT  INTO  TBLSTUDENTS VALUES (1005, 'JACK', 34, 102)

-- WHICH CONSTRAINT HAS MORE PIRORITY?				NULL & NOT NULL
		-- OPTION 1:		PRIMARY KEY
		-- OPTION 2:		UNIQUE KEY
		-- OPTION 3:		NULL & NOT NULL 

-- QUERY 9: 
CREATE TABLE TBLSTAFF
(
STF_ID INT IDENTITY(100001, 1),		-- TO GENERATE AUTOMATED SEQUENCE OF VALUES. START VALUE = SEED. DEFAULT IS (1,1)
STF_NAME VARCHAR(30) NOT NULL,		-- THIS COLUMN DOES NOT ALLOW NULL VALUES		
STF_GENDER CHAR CHECK (STF_GENDER IN ('M','F')) DEFAULT 'F',
STF_COURSE_ID INT REFERENCES tblcourses (course_id)  
)

SP_HELP 'TBLSTAFF'

-- QUERY 10: 
INSERT INTO TBLSTAFF VALUES 	('JOHN',  'M', 101),  ('JOHNY',  'M', 101)
SELECT * FROM TBLSTAFF	

-- RULE: TO INSERT DEFAULT VALUE IN A COLUMN, SPECIFY REMAINING COLUMNS AND THIER VALUES
INSERT INTO TBLSTAFF (STF_NAME, STF_COURSE_ID)  	VALUES  ('JEFF', 101)
SELECT * FROM TBLSTAFF	

SELECT * FROM TBLSTAFF								-- TABLE SCAN	: TO READ DATA DIRECTLY FROM THE TABLE

CREATE CLUSTERED  INDEX IND1  ON  TBLSTAFF (STF_ID)	
SELECT * FROM TBLSTAFF								-- INDEX SCAN	: TO READ DATA FROM THE INDEX

CREATE NONCLUSTERED  INDEX IND2  ON  TBLSTAFF (STF_COURSE_ID)	
CREATE NONCLUSTERED  INDEX IND3  ON  TBLSTAFF (STF_GENDER)

SELECT * FROM TBLSTAFF WHERE STF_ID  >= 100001		-- INDEX SEEK	: TO SEARCH FOR DATA FROM THE INDEX

-- A TABLE CAN HAVE MULTIPLE INDEXES. 
-- QUERY OPTIMIZER WILL DECIDE THE BEST INDEX TO BE USED DURING THE QUERY EXECUTION TIME. 

-- BASIC INDEX CREATION EXAMPLES
CREATE CLUSTERED  INDEX IND1  ON  TBLSTAFF (STF_ID)				
SELECT * FROM TBLSTAFF WHERE STF_ID  >= 100001

CREATE NONCLUSTERED  INDEX IND2  ON  TBLSTAFF (STF_GENDER ASC)
SELECT * FROM TBLSTAFF WHERE STF_GENDER = 'M'

-- WHILE EXECUTING ABOVE QUERIES, "QUERY OPTIMIZER"  COMPONENT DECIDES 
-- THE BEST INDEX FROM THE AVAILABLE LIST OF INDEXES IN THE TABLE. 

/*
HOW TO VERIFY THE CONSTRAINTS?
	ALL 8 CONSTRAINTS ARE CLASSIFIED INTO THREE BROAD CATEGORIES:
		1. KEY CONSTRAINTS	:		PK, UQ, FK

		2. NON KEY CONSTRAINTS:		CHECK, DEFAULT

		3. COLUMN PROPERTIES:		NULL, NOT NULL, IDENTITY

NOTE: WHILE TRANSFERRING OR MIGRATING A TABLE FROM ONE DATABASE TO ANOTHER:
		THE TABLE PROPERTIES [NULL, NOT NULL, IDENTITY] ARE AUTO MIGRATED.

		REMAINING CONSTRAINTS NEEDS TO BE MIGRATED MANUALLY.


HOW TO VERIFY IDENTITY PROPERTY?
		RIGHT CLICK EACH NOT NULL COLUMN > PROPERTIES > CHECK IF IDENTITY : TRUE
*/



