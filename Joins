
-- REQ1 : HOW TO REPORT LIST OF ALL COURSES AND RESPECTIVE STUDENTS?
SELECT * FROM TBLCOURSES		-- THIS IS CALLED "LEFT TABLE"
INNER JOIN						-- THIS REPORTS MATCHING DATA ONLY
TBLSTUDENTS						-- THIS IS CALLED "RIGHT TABLE"
ON
TBLSTUDENTS.STD_COURSE_ID = TBLCOURSES.COURSE_ID

-- REQ2 : HOW TO REPORT LIST OF ALL COURSES WITH AND WITHOUT STUDENTS?
SELECT * FROM TBLCOURSES	-- THIS IS CALLED "LEFT TABLE"
LEFT OUTER JOIN				-- ALL LEFT TABLE DATA + MATCHING RIGHT TABLE DATA. NON MATCH RIGHT: NULL
TBLSTUDENTS					-- THIS IS CALLED "RIGHT TABLE"
ON
TBLSTUDENTS.STD_COURSE_ID = TBLCOURSES.COURSE_ID

-- REQ3 : HOW TO REPORT LIST OF ALL COURSES WITHOUT ANY STUDENT?
SELECT * FROM TBLCOURSES	-- THIS IS CALLED "LEFT TABLE"
LEFT OUTER JOIN				-- ALL LEFT TABLE DATA + MATCHING RIGHT TABLE DATA. NON MATCH RIGHT: NULL
TBLSTUDENTS					-- THIS IS CALLED "RIGHT TABLE"
ON
TBLSTUDENTS.STD_COURSE_ID = TBLCOURSES.COURSE_ID
WHERE		TBLSTUDENTS.STD_COURSE_ID IS NULL

-- REQ4 : HOW TO REPORT LIST OF ALL COURSES WITH STUDENTS?
SELECT * FROM TBLCOURSES	-- THIS IS CALLED "LEFT TABLE"
LEFT OUTER JOIN				-- ALL LEFT TABLE DATA + MATCHING RIGHT TABLE DATA. NON MATCH RIGHT: NULL
TBLSTUDENTS					-- THIS IS CALLED "RIGHT TABLE"
ON
TBLSTUDENTS.STD_COURSE_ID = TBLCOURSES.COURSE_ID
WHERE		TBLSTUDENTS.STD_COURSE_ID IS NOT NULL

-- HOW TO FINETUNE ABOVE QUERY (MAKE THE QUERY FASTER) ? 
		-- FOR THE COLUMNS USED IN THE QUERY CONDITIONS, WE NEED TO DEFINE "INDEXES"
		-- COLUMNS USED IN THE CONDITIONS FROM ABOVE QUERY:  TBLSTUDENTS.STD_COURSE_ID, TBLCOURSES.COURSE_ID
		-- FROM EARLIER TABLES CREATION SCRIPT :  TBLCOURSES.COURSE_ID  HAS A UNIQUE KEY. MEANS INDEXED.
		-- FOR REMAINING COLUMN : TBLSTUDENTS.STD_COURSE_ID WE NEED TO CREATE A NONCLUSTERED INDEX.

		-- ADDITIONAL TUNING OPTION [MAKING THE QUERIES TO EXECUTE MORE FASTER] : WE USE "JOIN OPTIONS"

SELECT * FROM TBLCOURSES	-- THIS IS CALLED "LEFT TABLE"
LEFT OUTER MERGE JOIN		-- USED TO JOIN BIG TABLES. USED FOR INNER & OUTER JOINS
TBLSTUDENTS					-- THIS IS CALLED "RIGHT TABLE"
ON
TBLSTUDENTS.STD_COURSE_ID = TBLCOURSES.COURSE_ID


SELECT * FROM TBLCOURSES	-- THIS IS CALLED "LEFT TABLE"
RIGHT OUTER LOOP JOIN		-- USED TO JOIN SMALL TABLES. USED FOR INNER & OUTER JOINS
TBLSTUDENTS					-- THIS IS CALLED "RIGHT TABLE"
ON
TBLSTUDENTS.STD_COURSE_ID = TBLCOURSES.COURSE_ID

SELECT * FROM TBLCOURSES	-- THIS IS CALLED "LEFT TABLE"
INNER HASH JOIN				-- USED TO JOIN HEAP TABLES. USED FOR INNER & OUTER JOINS. HEAP : TABLES WITHOUT ANY INDEX
TBLSTUDENTS					-- THIS IS CALLED "RIGHT TABLE"
ON
TBLSTUDENTS.STD_COURSE_ID = TBLCOURSES.COURSE_ID


-- REQ5 : HOW TO REPORT LIST OF ALL COURSES WITH STUDENTS?
SELECT * FROM TBLSTUDENTS 	-- THIS IS CALLED "LEFT TABLE"
RIGHT OUTER JOIN			-- ALL LEFT TABLE DATA + MATCHING RIGHT TABLE DATA. NON MATCH RIGHT: NULL
TBLCOURSES					-- THIS IS CALLED "RIGHT TABLE"
ON
TBLSTUDENTS.STD_COURSE_ID = TBLCOURSES.COURSE_ID



-- EXAMPLES FOR FULL OUTER JOIN
create table Reservation
(
Aircraft_Code varchar(10), 
No_of_Seats int,
Class_Code varchar(10)
)
INSERT INTO Reservation VALUES ('AI01', 11, 'ECO'), ('AI02', 22, 'ECO')
INSERT INTO Reservation VALUES ('AI03', 33, 'ECO'), ('AI04', 44, 'ECO')


CREATE TABLE FLIGHT
(	CRAFT_CODE VARCHAR(30),
	SOURCE VARCHAR(30),
	DESTINATION VARCHAR(30)
)
INSERT INTO FLIGHT VALUES ('AI01', 'HYB', 'NYC'), ('AI03', 'HYB', 'LSA'), ('AI05', 'HYB', 'LSA')

-- HOW TO REPORT LIST OF ALL FLIGHTS AND RESPECTIVE RESESRVATIONS?
SELECT * FROM Reservation
INNER MERGE JOIN 
FLIGHT
ON
Reservation.Aircraft_Code = FLIGHT.CRAFT_CODE


-- HOW TO REPORT LIST OF ALL FLIGHTS WITH AND WITHOUT RESESRVATIONS?
SELECT * FROM Reservation
LEFT OUTER MERGE JOIN 
FLIGHT
ON
Reservation.Aircraft_Code = FLIGHT.CRAFT_CODE


-- HOW TO REPORT LIST OF ALL RESERVATIONS WITH AND WITHOUT FLIGHTS?
SELECT * FROM Reservation
RIGHT OUTER MERGE JOIN 
FLIGHT
ON
Reservation.Aircraft_Code = FLIGHT.CRAFT_CODE


-- HOW TO REPORT LIST OF ALL FLIGHTS WITH AND WITHOUT RESESRVATIONS?
-- HOW TO REPORT LIST OF ALL RESERVATIONS WITH AND WITHOUT FLIGHTS?
SELECT * FROM Reservation
FULL OUTER MERGE JOIN 
FLIGHT
ON
Reservation.Aircraft_Code = FLIGHT.CRAFT_CODE


-- HOW TO REPORT LIST OF ALL FLIGHTS & RESERVATIONS.. REPORT ALL POSSIBLE COMBINATIONS?
SELECT * FROM Reservation
CROSS JOIN					-- TO REPORT M X N  COMBINATIONS.
FLIGHT












-- REQ 6: HOW TO REPORT LIST OF ALL FLIGHTS WITH AND WITHOUT RESERVATIONS?
-- HOW TO REPORT LIST OF ALL RESERVATIONS WITH AND WITHOUT FLIGHTS?
SELECT * FROM FLIGHT
FULL OUTER JOIN			-- ALL LEFT, MATCHING RIGHT. NOT MATCH RIGHT: NULL ++ ALL RIGHT, MATCHING LEFT. NON MATCH LEFT: NULL
Reservation
ON
FLIGHT.CRAFT_CODE = Reservation.Aircraft_Code


SELECT * FROM FLIGHT
LEFT OUTER JOIN			-- ALL LEFT, MATCHING RIGHT. NOT MATCH RIGHT: NULL ++ ALL RIGHT, MATCHING LEFT. NON MATCH LEFT: NULL
Reservation
ON
FLIGHT.CRAFT_CODE = Reservation.Aircraft_Code


SELECT * FROM FLIGHT
RIGHT OUTER JOIN			-- ALL LEFT, MATCHING RIGHT. NOT MATCH RIGHT: NULL ++ ALL RIGHT, MATCHING LEFT. NON MATCH LEFT: NULL
Reservation
ON
FLIGHT.CRAFT_CODE = Reservation.Aircraft_Code


-- TASK 1:  HOW TO REPORT LIST OF ALL FLIGHTS WITH RESERVATIONS?
-- TASK 2:  HOW TO REPORT LIST OF ALL FLIGHTS WITHOUT RESERVATIONS?
-- TASK 3:  HOW TO REPORT LIST OF ALL RESERVATIONS WITH & WITHOUT FLIGHTS?
-- TASK 4:  HOW TO REPORT LIST OF ALL RESERVATIONS WITHOUT FLIGHTS?
-- TASK 5:  HOW TO REPORT LIST OF ALL FLIGHTS WITH SUCH RESERVATIONS FOR MAXIMUM NUMBER OF SEATS?


-- REQ 7: HOW TO REPORT ALL POSSIBLE JOIN COMBINATIONS FOR ABOVE TABLES?
-- EXAMPLE FOR CROSS JOIN  : REPORTS ALL POSSIBLE COMBINATIONS OF DATA
SELECT * FROM FLIGHT
CROSS JOIN			-- REPORT A RESERVATION FOR EVERY FLIGHT.
Reservation



-- FOR FASTER QUERY EXECUTIONS, WE NEED TO USE "JOIN OPTIONS"
-- MERGE JOIN	:	THIS OPTION IS USED TO JOIN BIGGER TABLES
-- LOOP JOIN	:	THIS OPTION IS USED TO JOIN SMALLER TBALES
-- HASH JOIN	:	THIS OPTION IS USSED TO JOIN HEAP TABLES [SUCH TABLES WITHOUT ANY INDEX]

SELECT * FROM TBLCOURSES
INNER MERGE JOIN			
TBLSTUDENTS
ON TBLCOURSES.COURSE_ID = TBLSTUDENTS.STD_COURSE_ID


SELECT * FROM TBLCOURSES
INNER LOOP JOIN			
TBLSTUDENTS
ON TBLCOURSES.COURSE_ID = TBLSTUDENTS.STD_COURSE_ID


SELECT * FROM TBLCOURSES
LEFT OUTER HASH JOIN			
TBLSTUDENTS
ON TBLCOURSES.COURSE_ID = TBLSTUDENTS.STD_COURSE_ID





/*
WHEN TO USE WHICH JOIN:

JOIN TYPES:
1.	INNER JOIN			:	TO REPORT MATCHING DATA
2.  OUTER JOINS			:	TO REPORT MATCHING DATA & MISSING DATA
3.  CROSS JOIN			:	TO REPORT ALL POSSIBLE VALUES [M X N combinations]

JOIN OPTIONS:
4.	MERGE JOIN			:	THIS OPTION IS USED TO JOIN BIGGER TABLES
5.	LOOP JOIN			:	THIS OPTION IS USED TO JOIN SMALLER TBALES
6.	HASH JOIN			:	THIS OPTION IS USSED TO JOIN HEAP TABLES [SUCH TABLES WITHOUT ANY INDEX]
*/
