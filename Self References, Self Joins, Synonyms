-- 12.1 - SELF REFERENCING KEYS 

CREATE DATABASE UNIVDATABASE111
GO
USE UNIVDATABASE111

-- SELF RERENCING KEYS :  SUCH TABLES THAT HAS FOREIGN KEY DEFINED ON THE CANDIDATE KEY OF SAME TABLE.
-- CANDIDATE KEY MEANS A PRIMARY KEY OR A UNIQUE KEY.  MEANS, A TABLE REFERENCING OR LINKING TO ITSELF.

CREATE TABLE empDetails
(
EmpID int,
EmpName varchar(30),
EmpManagerID int
)

-- REQ :  HOW TO ENSURE EVERY MANAGER IS A VALID EMPLOYEE ?
-- SOLUTION : NEED TO RELATE MANAGERID COLUMN WITH EMPLOYEEID COLUMN 

-- STEP 1: ADD PRIMARY KEY TO EXISTING TABLE?
ALTER TABLE empDetails ALTER COLUMN EmpID INT NOT NULL 
ALTER TABLE empDetails ADD CONSTRAINT PK_EMP_ID PRIMARY KEY(EmpID)


-- STEP 2: ADD FOREIGN KEY TO EXISTING TABLE?
ALTER TABLE empDetails ADD CONSTRAINT FK_EMP_ID FOREIGN KEY(EmpManagerID) REFERENCES empDetails(EmpID)


-- STEP 3: DATA INSERT
INSERT INTO empDetails VALUES (1001, 'JOHN', 1001)
INSERT INTO empDetails VALUES (1002, 'JEFF', 1001)
INSERT INTO empDetails VALUES (1003, 'SAM', 9999)			-- ERROR. INVALID MANAGER ID.  9999 IS NOT A VALID EMPLOYEE ID
INSERT INTO empDetails VALUES (1004, 'AMIN', 1002)			
INSERT INTO empDetails VALUES (1005, 'AMINI', 1002)	
INSERT INTO empDetails VALUES (1006, 'AMINISH', 1004)	
INSERT INTO empDetails VALUES (1007, 'AMINISHA', 1004)	
INSERT INTO empDetails VALUES (1008, 'AMI', 1001)	
INSERT INTO empDetails VALUES (1009, 'AMINIE', 1001)	


-- EXAMPLE TO IMPLEMENT SELF JOINS:
-- HOW TO REPORT LIST OF ALL MANAGERS AND RESPECTIVE EMPLOYEES?
SELECT * FROM empDetails AS E1
INNER JOIN
empDetails AS E2
ON
E1.EmpManagerID = E2.EmpID 


-- REFINED QUERY:
SELECT E2.*, E1.* FROM empDetails AS E1
INNER JOIN
empDetails AS E2
ON
E1.EmpManagerID = E2.EmpID 
ORDER BY E2.EmpID

-- REFINED QUERY:
SELECT E2.EmpID AS [MANAGER ID], E2.EmpName AS [MANAGER NAME],
E1.EmpID AS [EMPLOYEE ID], E1.EmpName AS [EMPLOYEE NAME] FROM empDetails AS E1
INNER JOIN
empDetails AS E2
ON
E1.EmpManagerID = E2.EmpID 
ORDER BY E2.EmpID

-- TASK 1:  REPORT LIST OF ALL MANAGERS WITH  HIGHEST LIST OF EMPLOYEES?
-- TASK 2:	REPORT LIST OF ALL EMPLOYEES FOR A GIVEN MANAGER BASED ON MANAGER ID?
-- TASK 3:	REPORT LIST OF ALL EMPLOYEES WITH MORE THAN ONE MANAGER, IF ANY?
-- TASK 4:	REPORT LIST OF ALL EMPLOYEES AND THEIR RESPECTIVE MANAGERS?










-- STEP 4: TO VERIFY THE RESULT:
SELECT * FROM empDetails





12.2 - SELF JOINS

-- HOW TO REPORT LIST OF ALL EMPLOYEES AND THEIR RESPECTIVE MANAGERS?
SELECT * FROM empDetails AS E1
INNER JOIN						
empDetails AS E2
ON
E1.EmpID = E2.EmpManagerID


-- HOW TO REPORT LIST OF ALL EMPLOYEES WHOSE MANAGER IS JOHN?
SELECT * FROM empDetails AS E1
INNER JOIN						
empDetails AS E2
ON
E1.EmpID = E2.EmpManagerID
WHERE
E2. EmpName = 'JOHN'


-- REPORT ALL EMPLOYEES FOR EACH MANAGER ?
SELECT E2.*, E1.* FROM empDetails AS E1
INNER JOIN						
empDetails AS E2
ON
E1.EmpID = E2.EmpManagerID


SYNONYMS
-- SYNONYMS: THESE ARE PERMENANT ALTERNATIVE NAMES TO THE TABLES
-- PURPOSE : TO HIDE THE TABLE OR VIEW NAME FOR THE END USER ACCESS

CREATE SYNONYM syn1 FOR empDetails
SELECT * FROM empDetails
SELECT * FROM syn1

INSERT INTO syn1 VALUES (1005, 'AMINISH', 1002)
SELECT * FROM syn1
SELECT * FROM empDetails

UPDATE syn1 SET Measure = 0
SELECT * FROM empDetails

DELETE FROM syn1 
 
